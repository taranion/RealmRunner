name: Compile All
on: [push]
#on:
#  push:
#    # Sequence of patterns matched against refs/tags
#    tags:
#    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
env:
  LANG: "en_EN.UTF-8"
  CENTRAL_SNAPSHOTS_TOKEN: ${{ secrets.CENTRAL_SNAPSHOTS_TOKEN }}
  OSSRH_USER_TOKEN: ${{ secrets.OSSRH_USER_TOKEN }}
  OSSRH_PWD_TOKEN: ${{ secrets.OSSRH_PWD_TOKEN }}
  DEPLOYMENT_ID: 2d8d891a-2263-4ed3-8036-a511d43d6e4f
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CC: gcc-11
  CXX: g++-11

jobs:
  linuxBinary:
    runs-on: ubuntu-latest
    steps:
    - name: checkout sources
      uses: actions/checkout@v4

    - name: setup-graalvm-ce
      uses: gluonhq/setup-graalvm@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
         # GraalVM version. Default: latest
         graalvm: 'latest'
         # Java version. Since GraalVM 22, either java11, java17 or java23. Before GraalVM 22, empty. Default: java23
         jdk: 'java23'
         # Architecture flag. Available options are 'x86_64' (default) and 'aarch64'. The latter is available for M1 runners starting GraalVM 22.1.
         arch: 'x86_64'

    - name: Set Release version env variable
      run: |
        echo "RELEASE_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

    - name: Compile GraphicMUD
      run: git submodule init ; git submodule update ; cd graphicmud ; mvn -B -s ../settings.xml clean install -Dgpg.skip -DskipTests

    - name: Compile dependencies
      run: mvn -U -B -s settings.xml clean install -Dgpg.skip

    - name: Compile CLI Native
      run: cd RealmRunner_CLI ; mvn -B -s ../settings.xml clean package gluonfx:build; ls target  ; ls -l target/gluonfx/x86_64-linux

    - name: Package CLI Native
      run: cd RealmRunner_CLI ; mvn -B -s ../settings.xml gluonfx:package ; find target/gluonfx
      
    - name: Package JLink
      run: cd RealmRunner_CLI ; mvn -B -s ../settings.xml -f pom-jlink.xml package jpackage:jpackage

    - name: Results
      run: cd RealmRunner_CLI ; find target
      
    - name: Prepare
      run: |
        mkdir artifacts 
        cp "RealmRunner_CLI/target/realmrunner-*with_dependencies.jar artifacts/realmrunner-cli-${{ env.RELEASE_VERSION }}.jar
        cp "RealmRunner_CLI/target/gluonfx/x86_64-linux/Realm Runner CLI" artifacts/realmrunner-cli
        cp "RealmRunner_CLI/target/dist/realmrunner*.deb artifacts/
        cp "RealmRunner_CLI/target/dist/realmrunner*.rpm artifacts/
        ls -l artifacts/
    - uses: actions/upload-artifact@v4
      with:
        name: realmrunner-cli-${{ env.RELEASE_VERSION }}-JAR
        path: artifacts/realmrunner-cli-${{ env.RELEASE_VERSION }}.jar
    - uses: actions/upload-artifact@v4
      with:
        name: realmrunner-cli-${{ env.RELEASE_VERSION }}-LINUX-EXECUTABLE
        path: artifacts/realmrunner-cli
    - uses: actions/upload-artifact@v4
      continue-on-error: true
      with:
        name: realmrunner-cli-${{ env.RELEASE_VERSION }}.deb
        path: artifacts/realmrunner-cli-${{ env.RELEASE_VERSION }}.deb
    - uses: actions/upload-artifact@v4
      continue-on-error: true
      with:
        name: realmrunner-cli-${{ env.RELEASE_VERSION }}.rpm
        path: artifacts/realmrunner-cli-${{ env.RELEASE_VERSION }}.rpm
        